/*
 * This source file was generated by the Gradle 'init' task
 */
package pa8;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class GraphTest {
    @Test
    void testGraphMatrixAddEdge() {
        GraphMatrix graph = new GraphMatrix(3);
        graph.addEdge(0, 1);
        assertEquals("0 1", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixBfsEmptyGraph() {
        GraphMatrix graph = new GraphMatrix(3);
        assertEquals("0", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixBfsSingleNodeGraph() {
        GraphMatrix graph = new GraphMatrix(1);
        assertEquals("0", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixBfsDisconnectedGraph() {
        GraphMatrix graph = new GraphMatrix(3);
        graph.addEdge(0, 1);
        assertEquals("0 1", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixDfsDisconnectedGraph() {
        GraphMatrix graph = new GraphMatrix(3);
        graph.addEdge(0, 1);
        assertEquals("0 1", graph.dfs(0).toString());
    }

    @Test
    void testGraphMatrixCycleDetectionNoCycle() {
        GraphMatrix graph = new GraphMatrix(3);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        assertFalse(graph.hasCycle());
    }

    @Test
    void testGraphMatrixCycleDetectionWithCycle() {
        GraphMatrix graph = new GraphMatrix(3);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        assertTrue(graph.hasCycle());
    }

    @Test
    void testGraphMatrixShortestPath() {
        GraphMatrix graph = new GraphMatrix(5);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);
        assertEquals("0 1 2 3 4", graph.shortestPath(0, 4).toString());
    }

    // Tests for GraphList
    @Test
    void testGraphListAddEdge() {
        GraphList graph = new GraphList(3);
        graph.addEdge(0, 1);
        assertEquals("0 1", graph.bfs(0).toString());
    }

    @Test
    void testGraphListBfsEmptyGraph() {
        GraphList graph = new GraphList(3);
        assertEquals("0", graph.bfs(0).toString());
    }

    @Test
    void testGraphListBfsSingleNodeGraph() {
        GraphList graph = new GraphList(1);
        assertEquals("0", graph.bfs(0).toString());
    }

    @Test
    void testGraphListBfsDisconnectedGraph() {
        GraphList graph = new GraphList(3);
        graph.addEdge(0, 1);
        assertEquals("0 1", graph.bfs(0).toString());
    }

    @Test
    void testGraphListDfsDisconnectedGraph() {
        GraphList graph = new GraphList(3);
        graph.addEdge(0, 1);
        assertEquals("0 1 ", graph.dfs(0).toString());
    }

    @Test
    void testGraphListCycleDetectionNoCycle() {
        GraphList graph = new GraphList(3);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        assertFalse(graph.hasCycle());
    }

    @Test
    void testGraphListCycleDetectionWithCycle() {
        GraphList graph = new GraphList(3);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(2, 0);
        assertTrue(graph.hasCycle());
    }

    @Test
    void testGraphListShortestPath() {
        GraphList graph = new GraphList(5);
        graph.addEdge(0, 1);
        graph.addEdge(1, 2);
        graph.addEdge(2, 3);
        graph.addEdge(3, 4);
        assertEquals("0 1 2 3 4", graph.shortestPath(0, 4).toString());
    }

    // Tests for GraphMatrixWeighted
    @Test
    void testGraphMatrixWeightedAddEdge() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(3);
        graph.addWeightedEdge(0, 1, 10);
        assertEquals("0 1", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixWeightedBfsEmptyGraph() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(3);
        assertEquals("0", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixWeightedBfsSingleNodeGraph() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(1);
        assertEquals("0", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixWeightedBfsDisconnectedGraph() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(3);
        graph.addWeightedEdge(0, 1, 10);
        assertEquals("0 1", graph.bfs(0).toString());
    }

    @Test
    void testGraphMatrixWeightedDfsDisconnectedGraph() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(3);
        graph.addWeightedEdge(0, 1, 10);
        assertEquals("0 1 ", graph.dfs(0).toString());
    }

    @Test
    void testGraphMatrixWeightedCycleDetectionNoCycle() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(3);
        graph.addWeightedEdge(0, 1, 10);
        graph.addWeightedEdge(1, 2, 5);
        assertFalse(graph.hasCycle());
    }

    @Test
    void testGraphMatrixWeightedCycleDetectionWithCycle() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(3);
        graph.addWeightedEdge(0, 1, 10);
        graph.addWeightedEdge(1, 2, 5);
        graph.addWeightedEdge(2, 0, 2);
        assertTrue(graph.hasCycle());
    }

    @Test
    void testGraphMatrixWeightedShortestPath() {
        GraphMatrixWeighted graph = new GraphMatrixWeighted(5);
        graph.addWeightedEdge(0, 1, 10);
        graph.addWeightedEdge(1, 2, 2);
        graph.addWeightedEdge(2, 3, 1);
        graph.addWeightedEdge(3, 4, 3);
        assertEquals("0 1 2 3 4 ", graph.shortestPath(0, 4).toString());
    }
}


